
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.70 (7612) x86_64-apple-darwin15.6.0]

[Workspace restored from /Users/rongbin/.RData]
[History restored from /Users/rongbin/.Rapp.history]

> swirl()
Error in swirl() : could not find function "swirl"
> library(siwrl())
Error in library(siwrl()) : there is no package called ‘siwrl’
> library(swirl())

| Hi! I see that you have some variables saved in
| your workspace. To keep things running smoothly, I
| recommend you clean up before starting swirl.

| Type ls() to see a list of the variables in your
| workspace. Then, type rm(list=ls()) to clear your
| workspace.

| Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl! Please sign in. If you've been
| here before, use the same name as you did then. If
| you are new, call yourself something unique.

What shall I call you? Robin

| Would you like to continue with one of these
| lessons?

1: R Programming Functions
2: R Programming lapply and sapply
3: R Programming Logic
4: No. Let me start something new.

Selection: 2



| The 'l' in 'lapply' stands for 'list'. Type
| class(cls_list) to confirm that lapply() returned
| a list.

> class(cls_list
+ )
[1] "list"

| You are amazing!
  |============                               |  28%
| As expected, we got a list of length 30 -- one
| element for each variable/column. The output would
| be considerably more compact if we could represent
| it as a vector instead of a list.

...
  |=============                              |  30%
| You may remember from a previous lesson that lists
| are most helpful for storing multiple classes of
| data. In this case, since every element of the
| list returned by lapply() is a character vector of
| length one (i.e. "integer" and "vector"), cls_list
| can be simplified to a character vector. To do
| this manually, type as.character(cls_list).

> lapply()
Error in match.fun(FUN) : argument "FUN" is missing, with no default
> as.character(cls_list)
 [1] "factor"  "integer" "integer" "integer"
 [5] "integer" "integer" "integer" "integer"
 [9] "integer" "integer" "integer" "integer"
[13] "integer" "integer" "integer" "integer"
[17] "integer" "factor"  "integer" "integer"
[21] "integer" "integer" "integer" "integer"
[25] "integer" "integer" "integer" "integer"
[29] "factor"  "factor" 

| All that practice is paying off!
  |==============                             |  32%
| sapply() allows you to automate this process by
| calling lapply() behind the scenes, but then
| attempting to simplify (hence the 's' in 'sapply')
| the result for you. Use sapply() the same way you
| used lapply() to get the class of each column of
| the flags dataset and store the result in
| cls_vect. If you need help, type ?sapply to bring
| up the documentation.

> cls_vect <-sapply(flags, mean)
Warning messages:
1: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
2: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
3: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA
4: In mean.default(X[[i]], ...) :
  argument is not numeric or logical: returning NA

| Not quite right, but keep trying. Or, type info()
| for more options.

| Type cls_vect <- sapply(flags, class) to store the
| column classes in a character vector called
| cls_vect.

> cls_vect <- sapply(flags, class)

| Nice work!
  |===============                            |  34%
| Use class(cls_vect) to confirm that sapply()
| simplified the result to a character vector.

> class(cls_vect)
[1] "character"

| Perseverance, that's the answer.
  |===============                            |  36%
| In general, if the result is a list where every
| element is of length one, then sapply() returns a
| vector. If the result is a list where every
| element is a vector of the same length (> 1),
| sapply() returns a matrix. If sapply() can't
| figure things out, then it just returns a list, no
| different from what lapply() would give you.

...
  |================                           |  38%
| Let's practice using lapply() and sapply() some
| more!

...
  |=================                          |  40%
| Columns 11 through 17 of our dataset are indicator
| variables, each representing a different color.
| The value of the indicator variable is 1 if the
| color is present in a country's flag and 0
| otherwise.

...
  |==================                         |  42%
| Therefore, if we want to know the total number of
| countries (in our dataset) with, for example, the
| color orange on their flag, we can just add up all
| of the 1s and 0s in the 'orange' column. Try
| sum(flags$orange) to see this.

> sum(flags$orange)
[1] 26

| That's correct!
  |===================                        |  44%
| Now we want to repeat this operation for each of
| the colors recorded in the dataset.

...
  |====================                       |  46%
| First, use flag_colors <- flags[, 11:17] to
| extract the columns containing the color data and
| store them in a new data frame called flag_colors.
| (Note the comma before 11:17. This subsetting
| command tells R that we want all rows, but only
| columns 11 through 17.)

> flag_colors <- flags[, 11:17]

| Perseverance, that's the answer.
  |=====================                      |  48%
| Use the head() function to look at the first 6
| lines of flag_colors.

> 
> head(flag_colors)
  red green blue gold white black orange
1   1     1    0    1     1     1      0
2   1     0    0    1     0     1      0
3   1     1    0    0     1     0      0
4   1     0    1    1     1     0      1
5   1     0    1    1     0     0      0
6   1     0    0    1     0     1      0

| Perseverance, that's the answer.
  |======================                     |  50%
| To get a list containing the sum of each column of
| flag_colors, call the lapply() function with two
| arguments. The first argument is the object over
| which we are looping (i.e. flag_colors) and the
| second argument is the name of the function we
| wish to apply to each column (i.e. sum). Remember
| that the second argument is just the name of the
| function with no parentheses, etc.

> sum <- lapply(flag_colors, sum)

| Keep trying! Or, type info() for more options.

| Use lapply(flag_colors, sum) to return the sum of
| each column.

> lapply(flag_colors, sum)
$red
[1] 153

$green
[1] 91

$blue
[1] 99

$gold
[1] 91

$white
[1] 146

$black
[1] 52

$orange
[1] 26


| That's a job well done!
  |======================                     |  52%
| This tells us that of the 194 flags in our
| dataset, 153 contain the color red, 91 contain
| green, 99 contain blue, and so on.

...
  |=======================                    |  54%
| The result is a list, since lapply() always
| returns a list. Each element of this list is of
| length one, so the result can be simplified to a
| vector by calling sapply() instead of lapply().
| Try it now.

> sapply(flag_color, sum)
Error in lapply(X = X, FUN = FUN, ...) : object 'flag_color' not found
> sapply(flags_color, sum)
Error in lapply(X = X, FUN = FUN, ...) : object 'flags_color' not found
> sapply(flag_colors, sum)
   red  green   blue   gold  white  black orange 
   153     91     99     91    146     52     26 

| Keep up the great work!
  |========================                   |  56%
| Perhaps it's more informative to find the
| proportion of flags (out of 194) containing each
| color. Since each column is just a bunch of 1s and
| 0s, the arithmetic mean of each column will give
| us the proportion of 1s. (If it's not clear why,
| think of a simpler situation where you have three
| 1s and two 0s -- (1 + 1 + 1 + 0 + 0)/5 = 3/5 =
| 0.6).

...
  |=========================                  |  58%
| Use sapply() to apply the mean() function to each
| column of flag_colors. Remember that the second
| argument to sapply() should just specify the name
| of the function (i.e. mean) that you want to
| apply.

> sapply(flag_colors, mean)
      red     green      blue      gold     white 
0.7886598 0.4690722 0.5103093 0.4690722 0.7525773 
    black    orange 
0.2680412 0.1340206 

| That's a job well done!
  |==========================                 |  60%
| In the examples we've looked at so far, sapply()
| has been able to simplify the result to vector.
| That's because each element of the list returned
| by lapply() was a vector of length one. Recall
| that sapply() instead returns a matrix when each
| element of the list returned by lapply() is a
| vector of the same length (> 1).

...
  |===========================                |  62%
| To illustrate this, let's extract columns 19
| through 23 from the flags dataset and store the
| result in a new data frame called flag_shapes.
| flag_shapes <- flags[, 19:23] will do it.

> flag_shapes <- flags[, 19:23]

| Excellent job!
  |============================               |  64%
| Each of these columns (i.e. variables) represents
| the number of times a particular shape or design
| appears on a country's flag. We are interested in
| the minimum and maximum number of times each shape
| or design appears.

...
  |============================               |  66%
| The range() function returns the minimum and
| maximum of its first argument, which should be a
| numeric vector. Use lapply() to apply the range
| function to each column of flag_shapes. Don't
| worry about storing the result in a new variable.
| By now, we know that lapply() always returns a
| list.

> lapply(flag_shapes, range)
$circles
[1] 0 4

$crosses
[1] 0 2

$saltires
[1] 0 1

$quarters
[1] 0 4

$sunstars
[1]  0 50


| You are quite good my friend!
  |=============================              |  68%
| Do the same operation, but using sapply() and
| store the result in a variable called shape_mat.

> shape_mat <- sapply(flag_shapes, length)

| Not quite, but you're learning! Try again. Or,
| type info() for more options.

| shape_mat <- sapply(flag_shapes, range) will apply
| the range() function to each column of flag_shapes
| and store the result in shape_mat.

> shape_mat <- sapply(flag_shapes, range)

| You nailed it! Good job!
  |==============================             |  70%
| View the contents of shape_mat.

> shape_mat
     circles crosses saltires quarters sunstars
[1,]       0       0        0        0        0
[2,]       4       2        1        4       50

| Keep up the great work!
  |===============================            |  72%
| Each column of shape_mat gives the minimum (row 1)
| and maximum (row 2) number of times its respective
| shape appears in different flags.

...
  |================================           |  74%
| Use the class() function to confirm that shape_mat
| is a matrix.

> class(shape_mat)
[1] "matrix"

| Your dedication is inspiring!
  |=================================          |  76%
| As we've seen, sapply() always attempts to
| simplify the result given by lapply(). It has been
| successful in doing so for each of the examples
| we've looked at so far. Let's look at an example
| where sapply() can't figure out how to simplify
| the result and thus returns a list, no different
| from lapply().

...
  |==================================         |  78%
| When given a vector, the unique() function returns
| a vector with all duplicate elements removed. In
| other words, unique() returns a vector of only the
| 'unique' elements. To see how it works, try
| unique(c(3, 4, 5, 5, 5, 6, 6)).

> unique(c(3,4,5,5,5,6,6)
+ )
[1] 3 4 5 6

| You are amazing!
  |==================================         |  80%
| We want to know the unique values for each variable in the flags dataset. To accomplish this, use lapply() to apply the unique() function to
| each column in the flags dataset, storing the result in a variable called unique_vals.

> unique_vals<-lapply(flags,unique)

| You got it right!
  |===================================        |  82%
| Print the value of unique_vals to the console.

> unique_vals
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa           Andorra                 
  [6] Angola                   Anguilla                 Antigua-Barbuda          Argentina                Argentine               
 [11] Australia                Austria                  Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                   British-Virgin-Isles    
 [26] Brunei                   Bulgaria                 Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands       Cayman-Islands           Central-African-Republic
 [36] Chad                     Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                 Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                    El-Salvador              Equatorial-Guinea        Ethiopia                
 [56] Faeroes                  Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                   Germany-DDR             
 [66] Germany-FRG              Ghana                    Gibraltar                Greece                   Greenland               
 [71] Grenada                  Guam                     Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                     Iraq                    
 [86] Ireland                  Israel                   Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea                Kenya                    Kiribati                
 [96] Kuwait                   Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                     Malta                    Marianas                
[111] Mauritania               Mauritius                Mexico                   Micronesia               Monaco                  
[116] Mongolia                 Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand              Nicaragua               
[126] Niger                    Nigeria                  Niue                     North-Korea              North-Yemen             
[131] Norway                   Oman                     Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                   San-Marino              
[146] Sao-Tome                 Saudi-Arabia             Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                  South-Africa             South-Korea             
[156] South-Yemen              Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                    Taiwan                   Tanzania                
[171] Thailand                 Togo                     Tonga                    Trinidad-Tobago          Tunisia                 
[176] Turkey                   Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                      USSR                    
[186] Vanuatu                  Vatican-City             Venezuela                Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                    Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6   111   274   678    28
 [24]   474  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43    22    49   284  1001    21  1222    12    18
 [47]   337   547    91   268    10   108   249   239   132  2176   109   246    36   215   112    93   103  3268  1904  1648   435    70   301
 [70]   323    11   372    98   181   583   236    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925
 [93]   121   195   324   212   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505    66
[116]  2506    63    17   450   185   945   514    57     5   164   781   245   178  9363 22402    15   912   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Your dedication is inspiring!
  |====================================       |  84%
| Since unique_vals is a list, you can use what you've learned to determine the length of each element of unique_vals (i.e. the number of unique
| values for each variable). Simplify the result, if possible. Hint: Apply the length() function to each element of unique_vals.

> sapply(unique_vals,length)
      name   landmass       zone       area population   language   religion       bars    stripes    colours        red      green       blue 
       194          6          4        136         48         10          8          5         12          8          2          2          2 
      gold      white      black     orange    mainhue    circles    crosses   saltires   quarters   sunstars   crescent   triangle       icon 
         2          2          2          2          8          4          3          2          3         14          2          2          2 
   animate       text    topleft   botright 
         2          2          7          8 

| Keep up the great work!
  |=====================================      |  86%
| The fact that the elements of the unique_vals list are all vectors of *different* length poses a problem for sapply(), since there's no
| obvious way of simplifying the result.

...
  |======================================     |  88%
| Use sapply() to apply the unique() function to each column of the flags dataset to see that you get the same unsimplified list that you got
| from lapply().

> sappy(flags,lappy())
Error in sappy(flags, lappy()) : could not find function "sappy"
> sapply(flags,lapply(flags,unique))
Error in match.fun(FUN) : 
  'lapply(flags, unique)' is not a function, character or symbol
> sapply(unique_vals, unique)
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa           Andorra                 
  [6] Angola                   Anguilla                 Antigua-Barbuda          Argentina                Argentine               
 [11] Australia                Austria                  Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                   British-Virgin-Isles    
 [26] Brunei                   Bulgaria                 Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands       Cayman-Islands           Central-African-Republic
 [36] Chad                     Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                 Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                    El-Salvador              Equatorial-Guinea        Ethiopia                
 [56] Faeroes                  Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                   Germany-DDR             
 [66] Germany-FRG              Ghana                    Gibraltar                Greece                   Greenland               
 [71] Grenada                  Guam                     Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                     Iraq                    
 [86] Ireland                  Israel                   Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea                Kenya                    Kiribati                
 [96] Kuwait                   Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                     Malta                    Marianas                
[111] Mauritania               Mauritius                Mexico                   Micronesia               Monaco                  
[116] Mongolia                 Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand              Nicaragua               
[126] Niger                    Nigeria                  Niue                     North-Korea              North-Yemen             
[131] Norway                   Oman                     Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                   San-Marino              
[146] Sao-Tome                 Saudi-Arabia             Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                  South-Africa             South-Korea             
[156] South-Yemen              Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                    Taiwan                   Tanzania                
[171] Thailand                 Togo                     Tonga                    Trinidad-Tobago          Tunisia                 
[176] Turkey                   Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                      USSR                    
[186] Vanuatu                  Vatican-City             Venezuela                Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                    Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6   111   274   678    28
 [24]   474  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43    22    49   284  1001    21  1222    12    18
 [47]   337   547    91   268    10   108   249   239   132  2176   109   246    36   215   112    93   103  3268  1904  1648   435    70   301
 [70]   323    11   372    98   181   583   236    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925
 [93]   121   195   324   212   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505    66
[116]  2506    63    17   450   185   945   514    57     5   164   781   245   178  9363 22402    15   912   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Not quite, but you're learning! Try again. Or, type info() for more options.

| Use sapply(flags, unique) to apply the unique function to each column of flags, failing to simplify the result.

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa           Andorra                 
  [6] Angola                   Anguilla                 Antigua-Barbuda          Argentina                Argentine               
 [11] Australia                Austria                  Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                   British-Virgin-Isles    
 [26] Brunei                   Bulgaria                 Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands       Cayman-Islands           Central-African-Republic
 [36] Chad                     Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                 Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                    El-Salvador              Equatorial-Guinea        Ethiopia                
 [56] Faeroes                  Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                   Germany-DDR             
 [66] Germany-FRG              Ghana                    Gibraltar                Greece                   Greenland               
 [71] Grenada                  Guam                     Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                     Iraq                    
 [86] Ireland                  Israel                   Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea                Kenya                    Kiribati                
 [96] Kuwait                   Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                     Malta                    Marianas                
[111] Mauritania               Mauritius                Mexico                   Micronesia               Monaco                  
[116] Mongolia                 Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand              Nicaragua               
[126] Niger                    Nigeria                  Niue                     North-Korea              North-Yemen             
[131] Norway                   Oman                     Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                   San-Marino              
[146] Sao-Tome                 Saudi-Arabia             Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                  South-Africa             South-Korea             
[156] South-Yemen              Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                    Taiwan                   Tanzania                
[171] Thailand                 Togo                     Tonga                    Trinidad-Tobago          Tunisia                 
[176] Turkey                   Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                      USSR                    
[186] Vanuatu                  Vatican-City             Venezuela                Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                    Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6   111   274   678    28
 [24]   474  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43    22    49   284  1001    21  1222    12    18
 [47]   337   547    91   268    10   108   249   239   132  2176   109   246    36   215   112    93   103  3268  1904  1648   435    70   301
 [70]   323    11   372    98   181   583   236    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925
 [93]   121   195   324   212   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505    66
[116]  2506    63    17   450   185   945   514    57     5   164   781   245   178  9363 22402    15   912   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Nice work!
  |=======================================    |  90%
| Occasionally, you may need to apply a function that is not yet defined, thus requiring you to write your own. Writing functions in R is beyond
| the scope of this lesson, but let's look at a quick example of how you might do so in the context of loop functions.

...

  |========================================   |  92%
| Pretend you are interested in only the second item from each element of the unique_vals list that you just created. Since each element of the
| unique_vals list is a vector and we're not aware of any built-in function in R that returns the second element of a vector, we will construct
| our own function.

...
  |========================================   |  94%
| lapply(unique_vals, function(elem) elem[2]) will return a list containing the second item from each element of the unique_vals list. Note that
| our function takes one argument, elem, which is just a 'dummy variable' that takes on the value of each element of unique_vals, in turn.

> lappy(unique_vals, function(elem) elem[2])
Error in lappy(unique_vals, function(elem) elem[2]) : 
  could not find function "lappy"
> lappy(unique_vals, function(elem), elem[2])
Error: unexpected ',' in "lappy(unique_vals, function(elem),"
> lapply(unique_vals, function(elem) elem[2])
$name
[1] Albania
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 3

$zone
[1] 3

$area
[1] 29

$population
[1] 3

$language
[1] 6

$religion
[1] 6

$bars
[1] 2

$stripes
[1] 0

$colours
[1] 3

$red
[1] 0

$green
[1] 0

$blue
[1] 1

$gold
[1] 0

$white
[1] 0

$black
[1] 0

$orange
[1] 1

$mainhue
[1] red
Levels: black blue brown gold green orange red white

$circles
[1] 1

$crosses
[1] 1

$saltires
[1] 1

$quarters
[1] 1

$sunstars
[1] 0

$crescent
[1] 1

$triangle
[1] 1

$icon
[1] 0

$animate
[1] 1

$text
[1] 1

$topleft
[1] red
Levels: black blue gold green orange red white

$botright
[1] red
Levels: black blue brown gold green orange red white


| You got it!
  |=========================================  |  96%
| The only difference between previous examples and this one is that we are defining and using our own function right in the call to lapply().
| Our function has no name and disappears as soon as lapply() is done using it. So-called 'anonymous functions' can be very useful when one of
| R's built-in functions isn't an option.

...
  |========================================== |  98%
| In this lesson, you learned how to use the powerful lapply() and sapply() functions to apply an operation over the elements of a list. In the
| next lesson, we'll take a look at some close relatives of lapply() and sapply().

...
  |===========================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? rye1@jhu.edu
What is your assignment token? IJDnulBdXgNhPzb6
Grade submission succeeded!

| You are really on a roll!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: No. Let me start something new.

Selection: 3

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files        3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors         7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply         11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times           15: Base Graphics             

Selection: 11
  |                                                                                                                                       |   0%

| In the last lesson, you learned about the two most fundamental members of R's *apply family of functions: lapply() and sapply(). Both take a
| list as input, apply a function to each element of the list, then combine and return the result. lapply() always returns a list, whereas
| sapply() attempts to simplify the result.

...
  |=====                                                                                                                                  |   4%
| In this lesson, you'll learn how to use vapply() and tapply(), each of which serves a very specific purpose within the Split-Apply-Combine
| methodology. For consistency, we'll use the same dataset we used in the 'lapply and sapply' lesson.

...
  |===========                                                                                                                            |   8%
| The Flags dataset from the UCI Machine Learning Repository contains details of various nations and their flags. More information may be found
| here: http://archive.ics.uci.edu/ml/datasets/Flags

...
  |================                                                                                                                       |  12%
| I've stored the data in a variable called flags. If it's been a while since you completed the 'lapply and sapply' lesson, you may want to
| reacquaint yourself with the data by using functions like dim(), head(), str(), and summary() when you return to the prompt (>). You can also
| type viewinfo() at the prompt to bring up some documentation for the dataset. Let's get started!

...dim(flags)
  |======================                                                                                                                 |  16%
| As you saw in the last lesson, the unique() function returns a vector of the unique values contained in the object passed to it. Therefore,
| sapply(flags, unique) returns a list containing one vector of unique values for each column of the flags dataset. Try it again now.

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                  Algeria                  American-Samoa           Andorra                 
  [6] Angola                   Anguilla                 Antigua-Barbuda          Argentina                Argentine               
 [11] Australia                Austria                  Bahamas                  Bahrain                  Bangladesh              
 [16] Barbados                 Belgium                  Belize                   Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                  Botswana                 Brazil                   British-Virgin-Isles    
 [26] Brunei                   Bulgaria                 Burkina                  Burma                    Burundi                 
 [31] Cameroon                 Canada                   Cape-Verde-Islands       Cayman-Islands           Central-African-Republic
 [36] Chad                     Chile                    China                    Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands             Costa-Rica               Cuba                     Cyprus                  
 [46] Czechoslovakia           Denmark                  Djibouti                 Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                    El-Salvador              Equatorial-Guinea        Ethiopia                
 [56] Faeroes                  Falklands-Malvinas       Fiji                     Finland                  France                  
 [61] French-Guiana            French-Polynesia         Gabon                    Gambia                   Germany-DDR             
 [66] Germany-FRG              Ghana                    Gibraltar                Greece                   Greenland               
 [71] Grenada                  Guam                     Guatemala                Guinea                   Guinea-Bissau           
 [76] Guyana                   Haiti                    Honduras                 Hong-Kong                Hungary                 
 [81] Iceland                  India                    Indonesia                Iran                     Iraq                    
 [86] Ireland                  Israel                   Italy                    Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                   Kampuchea                Kenya                    Kiribati                
 [96] Kuwait                   Laos                     Lebanon                  Lesotho                  Liberia                 
[101] Libya                    Liechtenstein            Luxembourg               Malagasy                 Malawi                  
[106] Malaysia                 Maldive-Islands          Mali                     Malta                    Marianas                
[111] Mauritania               Mauritius                Mexico                   Micronesia               Monaco                  
[116] Mongolia                 Montserrat               Morocco                  Mozambique               Nauru                   
[121] Nepal                    Netherlands              Netherlands-Antilles     New-Zealand              Nicaragua               
[126] Niger                    Nigeria                  Niue                     North-Korea              North-Yemen             
[131] Norway                   Oman                     Pakistan                 Panama                   Papua-New-Guinea        
[136] Parguay                  Peru                     Philippines              Poland                   Portugal                
[141] Puerto-Rico              Qatar                    Romania                  Rwanda                   San-Marino              
[146] Sao-Tome                 Saudi-Arabia             Senegal                  Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands          Somalia                  South-Africa             South-Korea             
[156] South-Yemen              Spain                    Sri-Lanka                St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent               Sudan                    Surinam                  Swaziland               
[166] Sweden                   Switzerland              Syria                    Taiwan                   Tanzania                
[171] Thailand                 Togo                     Tonga                    Trinidad-Tobago          Tunisia                 
[176] Turkey                   Turks-Cocos-Islands      Tuvalu                   UAE                      Uganda                  
[181] UK                       Uruguay                  US-Virgin-Isles          USA                      USSR                    
[186] Vanuatu                  Vatican-City             Venezuela                Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                    Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra Angola Anguilla Antigua-Barbuda Argentina Argentine Australia Austria ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31    23   113    47  1099   600  8512     6   111   274   678    28
 [24]   474  9976     4   623  1284   757  9561  1139     2   342    51   115     9   128    43    22    49   284  1001    21  1222    12    18
 [47]   337   547    91   268    10   108   249   239   132  2176   109   246    36   215   112    93   103  3268  1904  1648   435    70   301
 [70]   323    11   372    98   181   583   236    30  1760     3   587   118   333  1240  1031  1973  1566   447   783   140    41  1267   925
 [93]   121   195   324   212   804    76   463   407  1285   300   313    92   237    26  2150   196    72   637  1221    99   288   505    66
[116]  2506    63    17   450   185   945   514    57     5   164   781   245   178  9363 22402    15   912   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35    4   24    2   11 1008    5   47   31   54   17   61   14  684
[29]  157   39   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Perseverance, that's the answer.
  |===========================                                                                                                            |  20%
| What if you had forgotten how unique() works and mistakenly thought it returns the *number* of unique values contained in the object passed to
| it? Then you might have incorrectly expected sapply(flags, unique) to return a numeric vector, since each element of the list returned would
| contain a single number and sapply() could then simplify the result to a vector.

...
  |================================                                                                                                       |  24%
| When working interactively (at the prompt), this is not much of a problem, since you see the result immediately and will quickly recognize
| your mistake. However, when working non-interactively (e.g. writing your own functions), a misunderstanding may go undetected and cause
| incorrect results later on. Therefore, you may wish to be more careful and that's where vapply() is useful.

...
  |======================================                                                                                                 |  28%
| Whereas sapply() tries to 'guess' the correct format of the result, vapply() allows you to specify it explicitly. If the result doesn't match
| the format you specify, vapply() will throw an error, causing the operation to stop. This can prevent significant problems in your code that
| might be caused by getting unexpected return values from sapply().

...
  |===========================================                                                                                            |  32%
| Try vapply(flags, unique, numeric(1)), which says that you expect each element of the result to be a numeric vector of length 1. Since this is
| NOT actually the case, YOU WILL GET AN ERROR. Once you get the error, type ok() to continue to the next question.

> vapply(flags, unique, numeric(1))
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> ok()

| You are really on a roll!
  |=================================================                                                                                      |  36%
| Recall from the previous lesson that sapply(flags, class) will return a character vector containing the class of each column in the dataset.
| Try that again now to see the result.

> sapply(flags, class)
      name   landmass       zone       area population   language   religion       bars    stripes    colours        red      green       blue 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      gold      white      black     orange    mainhue    circles    crosses   saltires   quarters   sunstars   crescent   triangle       icon 
 "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   animate       text    topleft   botright 
 "integer"  "integer"   "factor"   "factor" 

| You nailed it! Good job!
  |======================================================                                                                                 |  40%
| If we wish to be explicit about the format of the result we expect, we can use vapply(flags, class, character(1)). The 'character(1)' argument
| tells R that we expect the class function to return a character vector of length 1 when applied to EACH column of the flags dataset. Try it
| now.

> 
> vapply(flag, class, character(1))
Error in vapply(flag, class, character(1)) : object 'flag' not found
> vapply(flags, class, character(1))
      name   landmass       zone       area population   language   religion       bars    stripes    colours        red      green       blue 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      gold      white      black     orange    mainhue    circles    crosses   saltires   quarters   sunstars   crescent   triangle       icon 
 "integer"  "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   animate       text    topleft   botright 
 "integer"  "integer"   "factor"   "factor" 

| Great job!
  |===========================================================                                                                            |  44%
| Note that since our expectation was correct (i.e. character(1)), the vapply() result is identical to the sapply() result -- a character vector
| of column classes.

...
  |=================================================================                                                                      |  48%
| You might think of vapply() as being 'safer' than sapply(), since it requires you to specify the format of the output in advance, instead of
| just allowing R to 'guess' what you wanted. In addition, vapply() may perform faster than sapply() for large datasets. However, when doing
| data analysis interactively (at the prompt), sapply() saves you some typing and will often be good enough.

...
  |======================================================================                                                                 |  52%
| As a data analyst, you'll often wish to split your data up into groups based on the value of some variable, then apply a function to the
| members of each group. The next function we'll look at, tapply(), does exactly that.

...
  |============================================================================                                                           |  56%
| Use ?tapply to pull up the documentation.

> ?tapply
starting httpd help server ... done

| Keep up the great work!
  |=================================================================================                                                      |  60%
| The 'landmass' variable in our dataset takes on integer values between 1 and 6, each of which represents a different part of the world. Use
| table(flags$landmass) to see how many flags/countries fall into each group.

> table(flags$landmass)

 1  2  3  4  5  6 
31 17 35 52 39 20 

| Excellent work!
  |======================================================================================                                                 |  64%
| The 'animate' variable in our dataset takes the value 1 if a country's flag contains an animate image (e.g. an eagle, a tree, a human hand)
| and 0 otherwise. Use table(flags$animate) to see how many flags contain an animate image.

> table(flags$animate)

  0   1 
155  39 

| Excellent work!
  |============================================================================================                                           |  68%
| This tells us that 39 flags contain an animate object (animate = 1) and 155 do not (animate = 0).

...
  |=================================================================================================                                      |  72%
| If you take the arithmetic mean of a bunch of 0s and 1s, you get the proportion of 1s. Use tapply(flags$animate, flags$landmass, mean) to
| apply the mean function to the 'animate' variable separately for each of the six landmass groups, thus giving us the proportion of flags
| containing an animate image WITHIN each landmass group.

> tapply(flags$animate, flags$landmass,mean)
        1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000 

| Your dedication is inspiring!
  |=======================================================================================================                                |  76%
| The first landmass group (landmass = 1) corresponds to North America and contains the highest proportion of flags with an animate image
| (0.4194).

...
  |============================================================================================================                           |  80%
| Similarly, we can look at a summary of population values (in round millions) for countries with and without the color red on their flag with
| tapply(flags$population, flags$red, summary).

> tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    3.00   27.63    9.00  684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0     0.0     4.0    22.1    15.0  1008.0 


| You nailed it! Good job!
  |=================================================================================================================                      |  84%
| What is the median population (in millions) for countries *without* the color red on their flag?

1: 9.0
2: 27.6
3: 3.0
4: 4.0
5: 22.1
6: 0.0

Selection: 3

| You are amazing!
  |=======================================================================================================================                |  88%
| Lastly, use the same approach to look at a summary of population values for each of the six landmasses.

> tapply(flags$popylation, flags$landmass,mean)
Error in tapply(flags$popylation, flags$landmass, mean) : 
  arguments must have same length
> tapply(flags$population, flags$landmass,mean)
        1         2         3         4         5         6 
12.290323 15.705882 13.857143  8.788462 69.179487 11.300000 

| That's not the answer I was looking for, but try again. Or, type info() for more options.

| You can see a summary of populations for each of the six landmasses by calling tapply() with three arguments: flags$population,
| flags$landmass, and summary.

> tapply(flags$population, flags$landmass, summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   12.29    4.50  231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    1.00    6.00   15.71   15.00  119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    8.00   13.86   16.00   61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   5.000   8.788   9.750  56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    2.00   10.00   69.18   39.00 1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   11.30    1.25  157.00 


| Keep up the great work!
  |============================================================================================================================           |  92%
| What is the maximum population (in millions) for the fourth landmass group (Africa)?

1: 157.00
2: 56.00
3: 1010.0
4: 119.0
5: 5.00

Selection: 2

| Keep up the great work!
  |==================================================================================================================================     |  96%
| In this lesson, you learned how to use vapply() as a safer alternative to sapply(), which is most helpful when writing your own functions. You
| also learned how to use tapply() to split your data into groups based on the value of some variable, then apply a function to each group.
| These functions will come in handy on your quest to become a better data analyst.

...
  |=======================================================================================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 2
What is your email address? rye1@jhu.edu
What is your assignment token? XMUGsSmE0zaZedGB
Grade submission succeeded!

| You got it right!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Functions
2: R Programming Logic
3: No. Let me start something new.

Selection: 3

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: swirl()
Enter an item from the menu, or 0 to exit
Selection: 0

| Leaving swirl now. Type swirl() to resume.

> library(data.base)
Error in library(data.base) : there is no package called ‘data.base’
> library(database)
Error in library(database) : there is no package called ‘database’
> library(datasets)
> data(iris)
> ?iris
> iris
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
3            4.7         3.2          1.3         0.2     setosa
4            4.6         3.1          1.5         0.2     setosa
5            5.0         3.6          1.4         0.2     setosa
6            5.4         3.9          1.7         0.4     setosa
7            4.6         3.4          1.4         0.3     setosa
8            5.0         3.4          1.5         0.2     setosa
9            4.4         2.9          1.4         0.2     setosa
10           4.9         3.1          1.5         0.1     setosa
11           5.4         3.7          1.5         0.2     setosa
12           4.8         3.4          1.6         0.2     setosa
13           4.8         3.0          1.4         0.1     setosa
14           4.3         3.0          1.1         0.1     setosa
15           5.8         4.0          1.2         0.2     setosa
16           5.7         4.4          1.5         0.4     setosa
17           5.4         3.9          1.3         0.4     setosa
18           5.1         3.5          1.4         0.3     setosa
19           5.7         3.8          1.7         0.3     setosa
20           5.1         3.8          1.5         0.3     setosa
21           5.4         3.4          1.7         0.2     setosa
22           5.1         3.7          1.5         0.4     setosa
23           4.6         3.6          1.0         0.2     setosa
24           5.1         3.3          1.7         0.5     setosa
25           4.8         3.4          1.9         0.2     setosa
26           5.0         3.0          1.6         0.2     setosa
27           5.0         3.4          1.6         0.4     setosa
28           5.2         3.5          1.5         0.2     setosa
29           5.2         3.4          1.4         0.2     setosa
30           4.7         3.2          1.6         0.2     setosa
31           4.8         3.1          1.6         0.2     setosa
32           5.4         3.4          1.5         0.4     setosa
33           5.2         4.1          1.5         0.1     setosa
34           5.5         4.2          1.4         0.2     setosa
35           4.9         3.1          1.5         0.2     setosa
36           5.0         3.2          1.2         0.2     setosa
37           5.5         3.5          1.3         0.2     setosa
38           4.9         3.6          1.4         0.1     setosa
39           4.4         3.0          1.3         0.2     setosa
40           5.1         3.4          1.5         0.2     setosa
41           5.0         3.5          1.3         0.3     setosa
42           4.5         2.3          1.3         0.3     setosa
43           4.4         3.2          1.3         0.2     setosa
44           5.0         3.5          1.6         0.6     setosa
45           5.1         3.8          1.9         0.4     setosa
46           4.8         3.0          1.4         0.3     setosa
47           5.1         3.8          1.6         0.2     setosa
48           4.6         3.2          1.4         0.2     setosa
49           5.3         3.7          1.5         0.2     setosa
50           5.0         3.3          1.4         0.2     setosa
51           7.0         3.2          4.7         1.4 versicolor
52           6.4         3.2          4.5         1.5 versicolor
53           6.9         3.1          4.9         1.5 versicolor
54           5.5         2.3          4.0         1.3 versicolor
55           6.5         2.8          4.6         1.5 versicolor
56           5.7         2.8          4.5         1.3 versicolor
57           6.3         3.3          4.7         1.6 versicolor
58           4.9         2.4          3.3         1.0 versicolor
59           6.6         2.9          4.6         1.3 versicolor
60           5.2         2.7          3.9         1.4 versicolor
61           5.0         2.0          3.5         1.0 versicolor
62           5.9         3.0          4.2         1.5 versicolor
63           6.0         2.2          4.0         1.0 versicolor
64           6.1         2.9          4.7         1.4 versicolor
65           5.6         2.9          3.6         1.3 versicolor
66           6.7         3.1          4.4         1.4 versicolor
67           5.6         3.0          4.5         1.5 versicolor
68           5.8         2.7          4.1         1.0 versicolor
69           6.2         2.2          4.5         1.5 versicolor
70           5.6         2.5          3.9         1.1 versicolor
71           5.9         3.2          4.8         1.8 versicolor
72           6.1         2.8          4.0         1.3 versicolor
73           6.3         2.5          4.9         1.5 versicolor
74           6.1         2.8          4.7         1.2 versicolor
75           6.4         2.9          4.3         1.3 versicolor
76           6.6         3.0          4.4         1.4 versicolor
77           6.8         2.8          4.8         1.4 versicolor
78           6.7         3.0          5.0         1.7 versicolor
79           6.0         2.9          4.5         1.5 versicolor
80           5.7         2.6          3.5         1.0 versicolor
81           5.5         2.4          3.8         1.1 versicolor
82           5.5         2.4          3.7         1.0 versicolor
83           5.8         2.7          3.9         1.2 versicolor
84           6.0         2.7          5.1         1.6 versicolor
85           5.4         3.0          4.5         1.5 versicolor
86           6.0         3.4          4.5         1.6 versicolor
87           6.7         3.1          4.7         1.5 versicolor
88           6.3         2.3          4.4         1.3 versicolor
89           5.6         3.0          4.1         1.3 versicolor
90           5.5         2.5          4.0         1.3 versicolor
91           5.5         2.6          4.4         1.2 versicolor
92           6.1         3.0          4.6         1.4 versicolor
93           5.8         2.6          4.0         1.2 versicolor
94           5.0         2.3          3.3         1.0 versicolor
95           5.6         2.7          4.2         1.3 versicolor
96           5.7         3.0          4.2         1.2 versicolor
97           5.7         2.9          4.2         1.3 versicolor
98           6.2         2.9          4.3         1.3 versicolor
99           5.1         2.5          3.0         1.1 versicolor
100          5.7         2.8          4.1         1.3 versicolor
101          6.3         3.3          6.0         2.5  virginica
102          5.8         2.7          5.1         1.9  virginica
103          7.1         3.0          5.9         2.1  virginica
104          6.3         2.9          5.6         1.8  virginica
105          6.5         3.0          5.8         2.2  virginica
106          7.6         3.0          6.6         2.1  virginica
107          4.9         2.5          4.5         1.7  virginica
108          7.3         2.9          6.3         1.8  virginica
109          6.7         2.5          5.8         1.8  virginica
110          7.2         3.6          6.1         2.5  virginica
111          6.5         3.2          5.1         2.0  virginica
112          6.4         2.7          5.3         1.9  virginica
113          6.8         3.0          5.5         2.1  virginica
114          5.7         2.5          5.0         2.0  virginica
115          5.8         2.8          5.1         2.4  virginica
116          6.4         3.2          5.3         2.3  virginica
117          6.5         3.0          5.5         1.8  virginica
118          7.7         3.8          6.7         2.2  virginica
119          7.7         2.6          6.9         2.3  virginica
120          6.0         2.2          5.0         1.5  virginica
121          6.9         3.2          5.7         2.3  virginica
122          5.6         2.8          4.9         2.0  virginica
123          7.7         2.8          6.7         2.0  virginica
124          6.3         2.7          4.9         1.8  virginica
125          6.7         3.3          5.7         2.1  virginica
126          7.2         3.2          6.0         1.8  virginica
127          6.2         2.8          4.8         1.8  virginica
128          6.1         3.0          4.9         1.8  virginica
129          6.4         2.8          5.6         2.1  virginica
130          7.2         3.0          5.8         1.6  virginica
131          7.4         2.8          6.1         1.9  virginica
132          7.9         3.8          6.4         2.0  virginica
133          6.4         2.8          5.6         2.2  virginica
134          6.3         2.8          5.1         1.5  virginica
135          6.1         2.6          5.6         1.4  virginica
136          7.7         3.0          6.1         2.3  virginica
137          6.3         3.4          5.6         2.4  virginica
138          6.4         3.1          5.5         1.8  virginica
139          6.0         3.0          4.8         1.8  virginica
140          6.9         3.1          5.4         2.1  virginica
141          6.7         3.1          5.6         2.4  virginica
142          6.9         3.1          5.1         2.3  virginica
143          5.8         2.7          5.1         1.9  virginica
144          6.8         3.2          5.9         2.3  virginica
145          6.7         3.3          5.7         2.5  virginica
146          6.7         3.0          5.2         2.3  virginica
147          6.3         2.5          5.0         1.9  virginica
148          6.5         3.0          5.2         2.0  virginica
149          6.2         3.4          5.4         2.3  virginica
150          5.9         3.0          5.1         1.8  virginica
> vir_s_length <-tapply(iris$Sepal.Length,Species$virginica, mean )
Error in tapply(iris$Sepal.Length, Species$virginica, mean) : 
  object 'Species' not found
> vir_s_length <-tapply(iris$Sepal.Length,Species$virginica, mean )
Error in tapply(iris$Sepal.Length, Species$virginica, mean) : 
  object 'Species' not found
> vir_s_length <-tapply(iris$Sepal.Length,iris$Species Species[virginica], mean )
Error: unexpected symbol in "vir_s_length <-tapply(iris$Sepal.Length,iris$Species Species"
> vir_s_length <-tapply(iris$Sepal.Length,iris$Species, mean )
> vir_s_length
    setosa versicolor  virginica 
     5.006      5.936      6.588 
> apply(iris,c(1),mean)
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [47] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [93] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
[139] NA NA NA NA NA NA NA NA NA NA NA NA
There were 50 or more warnings (use warnings() to see the first 50)
> apply(iris,1,mean)
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [47] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [93] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
[139] NA NA NA NA NA NA NA NA NA NA NA NA
There were 50 or more warnings (use warnings() to see the first 50)
> apply(iris,[,1:4],mean)
Error: unexpected '[' in "apply(iris,["
> apply(iris[,1:4],1,mean)
  [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350
 [24] 2.650 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375
 [47] 2.675 2.350 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600
 [70] 3.275 3.925 3.550 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775
 [93] 3.400 2.900 3.450 3.525 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575 4.200 4.850 4.200 4.075 4.350 3.800 4.025
[116] 4.300 4.200 5.100 4.875 3.675 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025 4.250 3.925 3.925 4.775 4.425 4.200
[139] 3.900 4.375 4.450 4.350 3.875 4.550 4.550 4.300 3.925 4.175 4.325 3.950
> rowMeans(iris[,1:4])
  [1] 2.550 2.375 2.350 2.350 2.550 2.850 2.425 2.525 2.225 2.400 2.700 2.500 2.325 2.125 2.800 3.000 2.750 2.575 2.875 2.675 2.675 2.675 2.350
 [24] 2.650 2.575 2.450 2.600 2.600 2.550 2.425 2.425 2.675 2.725 2.825 2.425 2.400 2.625 2.500 2.225 2.550 2.525 2.100 2.275 2.675 2.800 2.375
 [47] 2.675 2.350 2.675 2.475 4.075 3.900 4.100 3.275 3.850 3.575 3.975 2.900 3.850 3.300 2.875 3.650 3.300 3.775 3.350 3.900 3.650 3.400 3.600
 [70] 3.275 3.925 3.550 3.800 3.700 3.725 3.850 3.950 4.100 3.725 3.200 3.200 3.150 3.400 3.850 3.600 3.875 4.000 3.575 3.500 3.325 3.425 3.775
 [93] 3.400 2.900 3.450 3.525 3.525 3.675 2.925 3.475 4.525 3.875 4.525 4.150 4.375 4.825 3.400 4.575 4.200 4.850 4.200 4.075 4.350 3.800 4.025
[116] 4.300 4.200 5.100 4.875 3.675 4.525 3.825 4.800 3.925 4.450 4.550 3.900 3.950 4.225 4.400 4.550 5.025 4.250 3.925 3.925 4.775 4.425 4.200
[139] 3.900 4.375 4.450 4.350 3.875 4.550 4.550 4.300 3.925 4.175 4.325 3.950
> class(rowMeans(iris[,1:4]))
[1] "numeric"
> class(apply(iris[,1:4],1,mean))
[1] "numeric"
> class(c(1,2,3))
[1] "numeric"
> library(datasets)
> ?matcar
No documentation for ‘matcar’ in specified packages and libraries:
you could try ‘??matcar’
> data(mtcars)
> mtcars
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> tapply(mtcars$mpg, mtcars$cyl,mean)
       4        6        8 
26.66364 19.74286 15.10000 
> sapply(mtcars$mpg, mtcars$cyl,mean)
Error in match.fun(FUN) : 
  'mtcars$cyl' is not a function, character or symbol
> sapply(mtcars$mpg, mean)
 [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
[29] 15.8 19.7 15.0 21.4
> apply(mtcars,2,mean)
       mpg        cyl       disp         hp       drat         wt       qsec         vs         am       gear       carb 
 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750   0.437500   0.406250   3.687500   2.812500 
> mean(mtcars$mpg, mtcars$cyl)
Error in mean.default(mtcars$mpg, mtcars$cyl) : 
  'trim' must be numeric of length one
> split(mtcars)
Error in split(x = seq_len(nrow(x)), f = f, drop = drop, ...) : 
  argument "f" is missing, with no default
> sapply(split(mtcars$mpg, mtcars$cyl), mean)
       4        6        8 
26.66364 19.74286 15.10000 
> with(mtcars, tapply(mpg, cyl, mean))
       4        6        8 
26.66364 19.74286 15.10000 
> lapply(mtcars, mean)
$mpg
[1] 20.09062

$cyl
[1] 6.1875

$disp
[1] 230.7219

$hp
[1] 146.6875

$drat
[1] 3.596563

$wt
[1] 3.21725

$qsec
[1] 17.84875

$vs
[1] 0.4375

$am
[1] 0.40625

$gear
[1] 3.6875

$carb
[1] 2.8125

> sapply(mtcars, cyl, mean)
Error in match.fun(FUN) : object 'cyl' not found
> sapply(mtcars cyl, mean)
Error: unexpected symbol in "sapply(mtcars cyl"
> sapply(mtcars$cyl, mean)
 [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4
> sapply(mtcars$cyl, mean,mtcars%cyl)
Error: unexpected input in "sapply(mtcars$cyl, mean,mtcars%cyl)"
> split(mtcars, mtcars$cyl)
$`4`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2

$`6`
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6

$`8`
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8

> tapply(mtcars$cyl, mtcars$mpg, mean)
10.4 13.3 14.3 14.7   15 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.7   21 21.4 21.5 22.8 24.4   26 27.3 30.4 32.4 33.9 
   8    8    8    8    8    8    8    8    8    8    6    6    8    7    6    6    5    4    4    4    4    4    4    4    4 
> tapply(mtcars$hp, mtcars$cyl, mean)
        4         6         8 
 82.63636 122.28571 209.21429 
> tapply(mtcars$hp, mtcars$cyl, difference)
Error in tapply(mtcars$hp, mtcars$cyl, difference) : 
  object 'difference' not found
> 82.6363 - 209.2143
[1] -126.578
> debug(ls)
> ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, 
    pattern, sorted = TRUE) 
{
    if (!missing(name)) {
        pos <- tryCatch(name, error = function(e) e)
        if (inherits(pos, "error")) {
            name <- substitute(name)
            if (!is.character(name)) 
                name <- deparse(name)
            warning(gettextf("%s converted to character string", 
                sQuote(name)), domain = NA)
            pos <- name
        }
    }
    all.names <- .Internal(ls(envir, all.names, sorted))
    if (!missing(pattern)) {
        if ((ll <- length(grep("[", pattern, fixed = TRUE))) && 
            ll != length(grep("]", pattern, fixed = TRUE))) {
            if (pattern == "[") {
                pattern <- "\\["
                warning("replaced regular expression pattern '[' by  '\\\\['")
            }
            else if (length(grep("[^\\\\]\\[<-", pattern))) {
                pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
            }
        }
        grep(pattern, all.names, value = TRUE)
    }
    else all.names
}
<bytecode: 0x7f8d228d9e48>
<environment: namespace:base>
> ls()
debugging in: ls()
debug: {
    if (!missing(name)) {
        pos <- tryCatch(name, error = function(e) e)
        if (inherits(pos, "error")) {
            name <- substitute(name)
            if (!is.character(name)) 
                name <- deparse(name)
            warning(gettextf("%s converted to character string", 
                sQuote(name)), domain = NA)
            pos <- name
        }
    }
    all.names <- .Internal(ls(envir, all.names, sorted))
    if (!missing(pattern)) {
        if ((ll <- length(grep("[", pattern, fixed = TRUE))) && 
            ll != length(grep("]", pattern, fixed = TRUE))) {
            if (pattern == "[") {
                pattern <- "\\["
                warning("replaced regular expression pattern '[' by  '\\\\['")
            }
            else if (length(grep("[^\\\\]\\[<-", pattern))) {
                pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
            }
        }
        grep(pattern, all.names, value = TRUE)
    }
    else all.names
}
Browse[2]> 